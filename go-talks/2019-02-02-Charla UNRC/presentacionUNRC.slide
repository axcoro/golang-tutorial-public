Go: Go Go

Agustin Bauer
Axel Coronel

* ¿Qué hacemos?

Payments Core

- Diseñamos, desarrollamos y mantenemos la API de pagos.
- Somos los responsable de procesar TODOS los pagos de MercadoLibre y MercadoPago en LATAM
- Nuestros desafíos son la escalabilidad, consistencia, performance y uptime
- En el primer día del último CyberMonday, procesamos más de 2.2 millones de transacciones por más de 140 millones de dólares

.image ../resources/mercadolibrelogo.png _ _

* ¿Qué hacemos?

Cards

- Flujos de solicitud, activación y procesamiento de pagos de la tarjeta prepaga de MercadoPago
- Flujos de solicitud de la tarjeta de crédito de MercadoPago en convenio con bancos.
- Nuestros productos actualmente están en 3 paises (Argentina, Brasil, Mexico) con más de 2 millones de tarjetas emitidas.

.image ../resources/cards_mp.png 310 800

* ¿Para qué usamos GO en MELI?

- [P] Usamos Golang para el procesamiento offline de pagos y el envío de notificaciones de pagos a los usuarios
- [P] Procesamos 45k rpm de actualizaciones de pagos con tiempos de respuesta promedio de 15ms.
- [P] Enviamos 8k rpm de novedades de pagos con tiempos promedios de 10ms
- [C] Procesamos 8k rpm de búsquedas de tarjetas prepagas por distintos campos.
- [C] El manejo del flujo de solicitud de todas las tarjetas prepagas.
- [C] Procesamiento de todos los pagos y retiros de dinero con la tarjeta prepaga, en proceso de migración.

.image ../resources/golang_ironman.jpeg _ _

* Motivación del lenguaje

- El lenguaje Golang, arranca como un experimento en el 2007 por parte de 3 ingenieros de Google.
- Fue anunciado al mundo a fines del 2009, y en 2012 se estabiliza la API creando la versión 1.0. La versión actual es la 1.11.x y los cambios en la API fueron mínimos.
- El lenguaje fue diseñado para personas que escriben, leen y "debugean" grandes piezas de software
- Que fuera simple para escribir (menos es más). 
- Que fuera simple para leer (nos pasamos mucho tiempo leyendo código de otras personas).
- Concurrente (multi-core, asincrónico).
- Que compile a código nativo y rápido.
- Que tenga un memory footprint bajo.

* ¿Cuando usar go?

- *El*fuerte*de*Go*esta*en*escribir*software*de*backend*

- "Go is a good general purpose language, but the sweet spot it was designed for is writing large-scale, concurrent, server-side software"

.image ../resources/golang.png _ _

* Ventajas de GO

- Sintaxis sencilla, similar a C
- El compilador (re)fuerza buenas practicas
	Errores de compilación:
		imports que no se usan
		variables declaradas que no se usan
- Fácil de aprender
- Soporte a concurrencia de forma nativa e idiomatica
- El compilador es MUY rápido
- Fácil levantar un servidor
- Alta performance
: agregar ejemplos sobre cosas que no le gustan al compilador de Go

* Desventajas de GO

- Tiene muchas "convenciones" ($GOPATH, imports, vendoring, etc) que hacen setup inicial sea un poco confuso
- No soporta tipos genéricos (todavia, planificado para 2.x)
- Al ser un lenguaje relativamente nuevo, muchas herramientas/librerias carecen de madurez
- Poca documentacion "formal", mucha info esta en blogs

* Algunos proyectos que incluyen Go

- YouTube 
- dl.google.com
- Booking.com
- Blogger
- Datadog
- Facebook
- Github
- Google Code 
- Netflix
- Mercadolibre ;)

* ¿Paradigma?

- Imperativo
- Estructurado
- Pseudo orientado a objetos (structs + metodos)

.image ../resources/gopher_programmer.jpeg 400 400

* Caracteristicas de Go

- Fuertemente tipado
- Inferencia de tipos en tiempo de compilacion
	 a := "string"
	 var a = "string"
- Las funciones pueden ser pasadas como parámetros
- Las funciones pueden retornar más de un valor
- Interfaces
- No existen las excepciones
- Garbage Collection (GC)

* Tipos básicos

- bool
- string
- int  int8  int16  int32  int64
- uint uint8 uint16 uint32 uint64 uintptr
- byte // alias para uint8
- rune // alias para int32 - nombre elegante para "char"
- float32 float64
- complex64 complex128

* Tipos "no" básicos

- array
- slice
- map
- channel
- interface
- punteros
- funciones

* Constantes

- Pueden ser variables de tipo character, string, boolean o valores numéricos
- Es decir, cualquier tipo basico

- Ejemplos:

	const World = "世界"
	const Truth = true

* Inicialización de Variables

	var s string
	var s string = ""
	var s = ""
	s := "" // solo dentro de funciones
	
	var arr [5]int
	arr := [5]int{1, 2, 3, 4, 5}

	var (
		dunno     = []byte("???")
		centerDot = []byte("·")
		dot       = []byte(".")
		slash     = []byte("/")
	)

* Zero value (valor por defecto)

- *0* para tipos numéricos
- *false* para booleanos
- *""* para strings
- *nil* para interface, slice, channel, map, pointer y func

.play ../resources/src/01_zero_values/main.go

* Tipos de if

- if x < 0 { ... }

- if ... { ... } else { ... }

- if v := algo(); v < 10 { ... }


* Iteraciones #1

_for_inicialización;_condición;_incremento_

- for "común"

.play ../resources/src/02_iterations/0/main.go

* Iteraciones #2

_for_condition_{_}_

- for "while"

.play ../resources/src/02_iterations/1/main.go

* Iteraciones #3

_for_{_}_

- for "while infinito"

.play ../resources/src/02_iterations/2/main.go

: muy util cuando se usan chanels

* Iteraciones #4

_range_

- simil "for each"

.play ../resources/src/02_iterations/3/main.go

* Switch

.play ../resources/src/02_iterations/4/main.go

* Funciones

.play ../resources/src/03_functions/main.go

* Punteros

.play ../resources/src/06_pointers/main.go


* Structs

	type Vertex struct {
		X, Y int
	}

	var (
		v1 = Vertex{1, 2}  // de tipo Vertex
		v2 = Vertex{X: 1}  // Y:0 es implicito
		v3 = Vertex{}      // X:0 y Y:0
		p  = &Vertex{1, 2} // de tipo *Vertex
	)

* Structs continuación

	type tree struct {
		value       int
		left, right *tree
	}

	func add(t *tree, value int) *tree {
		if t == nil {
			// Equivalente a return &tree{value: value}.
			t = new(tree)
			t.value = value
			return t
		}
		if value < t.value {
			t.left = add(t.left, value)
		} else {
			t.right = add(t.right, value)
		}
		return t
	}


* Interfaces

.play ../resources/src/11_interfaces/1/main.go

* Interfaces continuación

	type Batman struct {
		Alias string
		Edad   int
	}

	func (s *Batman) Poderes() {
		fmt.Printf("Poderes de %s: %s", s.Alias, "dinero")
	}

.image ../resources/gopher_batman.png 300 300

* Interfaces continuación

.play ../resources/src/11_interfaces/2/main.go /^func main/,/^}/

* Duck typing

(En realidad "structural typing" por que es compilado 😝)

"Si camina como un pato, nada como un pato y suena como un pato.. debe ser un pato!"
.image ../resources/duck.png

* Composición

	type SuperHeroe interface {
		Poderes()
	}

	type Superman struct {
		Alias string
		Edad   int
	}

	func (s Superman) Poderes() {
		fmt.Printf("Poderes de %s: %s", s.Alias, "invulnerabilidad, vision de rayos x, volar, velocidad")
	}

	type SuperBoy struct {
		Superman
	}

* Composición continuación

.play ../resources/src/15_composition/1/main.go /^func main/,/^}/

* Composición continuación

	type SuperBoy struct {
	    Superman
	}

	func (s *SuperBoy) Poderes() string {
	    return fmt.Sprintf(Poderes de %s: %s", s.Alias, "volar")
	}
    
.play ../resources/src/15_composition/2/main.go /^func main/,/^}/

* Go routines

Una gorutina es un hilo liviano manejado por Go en tiempo de ejecución.
- *go f(x, y, z)*

Las gorutinas corren en el mismo espacio de memoria, por lo que el acceso a memoria compartida debe estar sincronizado.

.image ../resources/goroutines.png 300 300

* Go routines continuación

.play ../resources/src/14_gorutines/initial.go

* Channels

Los canales son un conducto tipado a través del cual se pueden enviar o recibir valores a través del operador <-

	ch <- v    // Send v to channel ch.
	v := <-ch  // Receive from ch, and
	           // assign value to v.

- Por defecto son bloqueantes, lo que permite a las go-rutinas sincronizarce sin necesidad de locks declarados explícitamente, por ejemplo.

- Pueden generar deadlocks.

- Pueden ser unidireccionales.

- Pueden ser cerrados.

* Channels continuación

.play ../resources/src/22_channels/initial/main.go

* Patrones de concurrencia en GO (Timer)

.play ../resources/src/25_concurrency_patterns/timer.go

* Patrones de concurrencia en GO (Ping pong)

.play ../resources/src/25_concurrency_patterns/ping_pong.go

* Patrones de concurrencia en GO (Ping pong)

.play ../resources/src/25_concurrency_patterns/ping_pong_2.go

* Patrones de concurrencia en GO (Fan in)

.play ../resources/src/25_concurrency_patterns/fan_in.go

* Patrones de concurrencia en GO (Workers)

.code ../resources/src/25_concurrency_patterns/workers.go

* Patrones de concurrencia en GO (Workers)

.play ../resources/src/25_concurrency_patterns/workers_main.go /^func main/,/^}/

* Preguntas

.image ../resources/questions.jpg _ _

